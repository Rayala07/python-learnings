# -*- coding: utf-8 -*-
"""Collections-1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CmB0X_rTWxFvR6_5Rw3keVwzZ1oJ1miz
"""

#List - 0 based indexing , you can traverse through elements to perform operations
#Ordered and mutable, duplicates are allowed

fruits = ["apple", "orange", "banana", "coconut"]

#to check whether particular element is available in LIST or not
print("apple" in fruits) #returns T or F

print()

#Traverse
for fruit in fruits:
  print(fruit)

#Mutable
fruits[0] = "grapes" #apple replaced with grapes
print(fruits)

#methods - .append() , .remove(), .insert(inclusive_i, exclusive_i), .sort() , .reverse(), .clear()
# .index(), .count() - as duplicates can be included in LISTS !

#Set - unordered and is immutable , no duplicates
fruits = {"apple", "orange", "banana", "coconut"}

#Cannot perform index based retrieval as sets are unordered
#Cannot change existing values but can add/remove elements
fruits.add("grapes")

print(fruits)

#Tuples - Are faster than lists they are ordered but immutable, duplicates also allowed
# 0-based indexing , methods are similar to list.methods()

fruits = ("apple", "orange", "banana", "coconut", "coconut")

fruits = ['apple', 'banana', 'mango', 'grape', 'orange']

fruits.append('pineapple')

fruits.remove('apple')

fruits.sort()
fruits.sort(reverse=True) #Sort in descending order
fruits.sort(key=len) #Sort by length of the word

print(fruits)

student_info = ('Rayala Viswanath', '22', 'ISE')

name, age, branch = student_info

print(f"Name: {name}, Age: {age}, Branch: {branch}")

student_info[1] = 23 #Error as tuples are immutable
#This helps when you want your data to stay fixed.

print(f"Name: {name}, Age: {age}, Branch: {branch}")

#Sets - Super useful when you want to:

# Remove duplicates

# Check membership fast

# Do math-like operations (union, intersection, etc.)

nums = [1,2,2,3,4,4,5]
unique_nums = set(nums)


#Can perform math operations such as - Intersection / Union / Difference
skills_python  = {'data', 'loops', 'functions', 'sets'}
skills_java = {'oop', 'functions', 'classes', 'sets'}

common_skills = skills_python.intersection(skills_java) #Common from both
print(common_skills)

all_skills = skills_python.union(skills_java) #All skills removing duplicates
print(all_skills)

only_python = skills_python.difference(skills_java) #Only in python
print(only_python)

#Student Course Manager using Lists-Tuples-Sets

#Used lists as storing names in sorted order necessary and duplicate names can exist
students = ['Alice', 'Bob', 'Charlie', 'Alice']

#Using Set for storing courses as they are unique and should be no duplicates existing
courses = {'Math', 'Physics', 'Python', 'AI'}

#Using tuples to store different types of data and fast retrival and traversing
student_info = ('Alice', 20, 'CSE')

#Adding new student and arranging them in ascending order
students.append('Chandan')
students.sort()
print(students)

#Adding new course and removing old one
courses.add('Java')
courses.remove('Physics')
print(courses)

#Retrieving student info in a proper format for multiple students you need to traverse through element and set them
#You need to store the tuple in a list to do that
students_info = [
      ('Alice', 20, 'CSE'),
      ('Bob', 22, 'ECE'),
      ('Chandan', 21, 'ISE')
]

#To add new students into existing data
students_info.append(('Avni', 22, 'SE'))

# for name, age, branch in students_info:
#   print(f"Name: {name}, Age: {age}, Branch: {branch}")

for name, age, branch in students_info:
  if branch == 'CSE':
    print(f"Name: {name}, Age: {age}, Branch: {branch}")


#Counting how many Alice named students are there in the class
students.count('Alice')

#Check for available courses
if 'AI' in courses:
  print('AI is available')
else:
  print('Sorry, Seats are full')

